#!/usr/bin/python

"""Strip unwanted attachments from e-mail messages.

This script is suitable for use as a procmail filter.

Most of the attachments that hit my inbox are high-resolution photos
addressed to wide-distribution mailing lists.  I (usually) could not
care less about these photos:  they only serve to bloat my Maildirs.
Worse, it takes a significant amount of time to transfer these
attachments over my pitiful last hop, which makes it difficult to
quickly page through hundreds of unread messages.

This script is most useful given some alternative means of recovering
removed attachments on-demand; for example, by using an e-mail
provider's web interface.

"""
import email
import sys

DEFAULT_KEEP_TYPES = ['text/plain', 'text/html']

STRIPPED_NOTICE = """

Removed attachment '{name}' of type {content_type}.

"""

def strip_message(msg):
  name = msg.get_filename('<no filename>')
  content_type = msg.get_content_type()
  notice = STRIPPED_NOTICE.format(name=name, content_type=content_type)
  msg.set_payload(notice)
  msg.set_type('plain/text')

def remove_attachments_from_message(msg, keep_types=DEFAULT_KEEP_TYPES):
  removed_messages = 0
  if isinstance(msg, str):
    return removed_messages
  if msg.is_multipart():
    for sub_msg in msg.get_payload():
      removed_messages += remove_attachments_from_message(sub_msg, keep_types)
  else:
    content_type = msg.get_content_type()
    if content_type not in keep_types:
      strip_message(msg)
      removed_messages += 1
  return removed_messages

def write_message(msg, output_stream):
  output_stream.write(msg.as_string())

def filter_attachments(filter_from=sys.stdin, filter_to=sys.stdout):
  root_msg = email.message_from_file(filter_from)
  remove_attachments_from_message(root_msg)
  write_message(root_msg, filter_to)

def main(args=None):
  if args is None:
    args=sys.argv
  filter_attachments()
  return 0

if __name__ == '__main__':
  sys.exit(main(sys.argv))
