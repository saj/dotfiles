#!/usr/bin/env python

"""
NAME

  colourise-failure - run a program, colourising its output on failure if
                      attached to a terminal


SYNOPSIS

  colourise-failure [ --outfg COLOUR ] [ --outbg COLOUR ] \
                    [ --errfg COLOUR ] [ --errbg COLOUR ] \
                    program [ arg ... ]

"""
from argparse import ArgumentParser
from fcntl import F_GETFL, F_SETFL, fcntl
from imp import load_source
from StringIO import StringIO
from subprocess import PIPE, Popen
import os
import sys

sys.dont_write_bytecode = True

colourise = load_source('colourise',
                        os.path.join(os.path.dirname(__file__), 'colourise'))

COLOURS          = colourise.COLOURS
get_fgcolour     = colourise.get_fgcolour
get_bgcolour     = colourise.get_bgcolour
is_fgcolour      = colourise.is_fgcolour
is_bgcolour      = colourise.is_bgcolour
colourise_stream = colourise.colourise_stream

def stream_strip_escapes(streamIn, streamOut):
  in_escape = False
  while True:
    c = streamIn.read(1)
    if c == "":
      break
    if in_escape:
      if c == 'm':
        in_escape = False
      continue
    if c == '\033':
      in_escape = True
      continue
    streamOut.write(c)

def main(argv=None):
  if argv is None:
    argv = sys.argv

  parser = ArgumentParser(description="Run a program, colourising its output "
                                      "on failure if attached to a terminal.",
                          usage="%(prog)s [options] program [args]")
  parser.add_argument('--outfg', default="reset",
                      help="foreground colour for standard output")
  parser.add_argument('--outbg', default="reset",
                      help="background colour for standard output")
  parser.add_argument('--errfg', default="red",
                      help="foreground colour for standard error")
  parser.add_argument('--errbg', default="reset",
                      help="background colour for standard error")
  parser.add_argument('--force', default=False, action='store_true',
                      help="force colour without a tty")
  parser.add_argument('program', nargs=1, help="program to execute")
  parser.add_argument('args', nargs='*', help="optional arguments to program")

  args = parser.parse_args(argv[1:])

  if not is_fgcolour(args.outfg):
    print >>sys.stderr, "Invalid --outfg colour: %s" % args.outfg
    return 2
  if not is_bgcolour(args.outbg):
    print >>sys.stderr, "Invalid --outbg colour: %s" % args.outbg
    return 2
  if not is_fgcolour(args.errfg):
    print >>sys.stderr, "Invalid --errfg colour: %s" % args.errfg
    return 2
  if not is_bgcolour(args.errbg):
    print >>sys.stderr, "Invalid --errbg colour: %s" % args.errbg
    return 2

  cmd_args = args.program + args.args

  p = Popen(cmd_args, stdin=sys.stdin, stdout=PIPE, stderr=PIPE, shell=False)

  fdOut = p.stdout.fileno()
  fdErr = p.stderr.fileno()
  fcntl(fdOut, F_SETFL, fcntl(fdOut, F_GETFL) | os.O_NONBLOCK)
  fcntl(fdErr, F_SETFL, fcntl(fdErr, F_GETFL) | os.O_NONBLOCK)

  sioOut = StringIO()
  sioErr = StringIO()

  rc = 1

  def flush():
    try:
      for i, o in [(p.stdout, sioOut), (p.stderr, sioErr)]:
        o.write(i.read())
    except IOError, e:
      if e.errno == 11:
        pass
      else:
        raise

  try:
    while True:
      flush()
      p.poll()
      if p.returncode is not None:
        flush()
        rc = p.returncode
        break

    sioOut.seek(0)
    sioErr.seek(0)

    if rc != 0:
      colourise_stream(sys.stdout, args.outfg, args.outbg, args.force)
      colourise_stream(sys.stderr, args.errfg, args.errbg, args.force)
      stream_strip_escapes(sioOut, sys.stdout)
      stream_strip_escapes(sioErr, sys.stderr)
    else:
      sys.stdout.write(sioOut.read())
      sys.stderr.write(sioErr.read())

  finally:
    colourise_stream(sys.stdout, 'reset', 'reset', args.force)
    colourise_stream(sys.stderr, 'reset', 'reset', args.force)

  return rc

if __name__ == '__main__':
  sys.exit(main(sys.argv))
