#! /bin/zsh
#
# zsh-fzy.plugin.zsh
# Copyright (C) 2018 Adrian Perez <aperez@igalia.com>
#
# Distributed under terms of the MIT license.
#
# https://github.com/aperezdc/zsh-fzy
#
# This file was slightly modified to suit my personal preferences.
# Mistakes or omissions are my own.  <sg@redu.cx>
#

ZSH_FZY="$(command -v fzy)"
[[ -z "${ZSH_FZY}" ]] && return 0

function fzy-file-default-command
{
	command find -L . \( -path '*/\.*' -o -fstype dev -o -fstype proc \) -prune \
		-o -type f -print \
		-o -type d -print \
		-o -type l -print 2> /dev/null | sed 1d | cut -b3-
}

function fzy-cd-default-command
{
	command find -L . \( -path '*/\.*' -o -fstype dev -o -fstype proc \) -prune \
		-o -type d -print 2> /dev/null | sed 1d | cut -b3-
}

function __fzy_cmd
{
	emulate -L zsh

	local widget=$1
	shift

	local -a args=( )
	local value
	if zstyle -s ":fzy:${widget}" prompt value ; then
		args+=( -p "${value}" )
	else
		args+=( -p "${widget} >> " )
	fi
	if zstyle -s ":fzy:${widget}" lines value ; then
		if [[ ${value} = min:* ]]; then
			local pos
			print '\e[6n' > /dev/tty
			read -rsd 'R' pos < /dev/tty
			pos=${pos#*\[}
			pos=${pos%;*}
			value=${value#min:}
			local available_lines=$(( LINES - pos - 1 ))
			if [[ ${available_lines} -gt ${value} ]]; then
				value=${available_lines}
			fi
		fi
		args+=( -l "${value}" )
	fi
	if zstyle -t ":fzy:${widget}" show-scores ; then
		args+=( -s )
	fi

	local -a cmd
	zstyle -a ":fzy:${widget}" command cmd || cmd=( )
	if [[ ${#cmd} -eq 0 ]] ; then
		cmd=("fzy-${widget}-default-command")
	fi

	"${cmd[@]}" | "${ZSH_FZY}" "${args[@]}" "$@"
}

function __fzy_fsel
{
	__fzy_cmd file | while read -r item ; do
		echo -n "${(q)item} "
	done
	echo
}

function fzy-file-widget
{
	emulate -L zsh
	zle -I
	LBUFFER="${LBUFFER}$(__fzy_fsel)"
	zle reset-prompt
}

function fzy-cd-widget
{
	emulate -L zsh
	zle -I
	cd "${$(__fzy_cmd cd):-.}"
	zle reset-prompt
}

zle -N fzy-file-widget
zle -N fzy-cd-widget

bindkey '^f'  fzy-file-widget
bindkey '^[c' fzy-cd-widget

zstyle :fzy:file command "${HOME}/bin/fuzzy-list-files"
zstyle :fzy:file lines   '20'
zstyle :fzy:cd   lines   '20'
