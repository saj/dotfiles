__zshenv_source() {
  for name in "$@"; do
    [[ -n "${name}" ]] || continue
    [[ -e "${name}" ]] || continue
    if [[ -d "${name}" ]]; then
      for f in "${name}"/*; do
        . "${f}"
      done
      continue
    fi
    . "${name}"
  done
}

__zshenv_source_base() {
  local dir="$1"
  shift
  [[ -d "${dir}" ]] || return 0
  for name in "$@"; do
    __zshenv_source "${dir}/${name}"
  done
}

# __zshenv_prepend_path VARIABLE DIRECTORY
#
# Prepend DIRECTORY to the colon-separated content of the scalar export
# VARIABLE and remove duplicates.  If DIRECTORY is not an existing
# directory on the local filesystem, do nothing, successfully.
__zshenv_prepend_path() {
  local -r variable="${1:?}"
  local -r directory="${2:?}"
  local -a old_path
  local -a new_path

  if [[ ! -d "${directory}" ]]; then
    return 0
  fi

  old_path=(${(Ps.:.)variable})
  new_path=(${directory})
  for d in "${old_path[@]}"; do
    if [[ "${d}" != "${directory}" ]]; then
      new_path+="${d}"
    fi
  done

  eval "export ${variable}=${(j.:.)new_path}"
}

# __zshenv_memoise FUNCTION-NAME
#
# Cache and replay the output from FUNCTION-NAME, an expensive function.  Cached
# output will never expire on its own accord, though cached output on the
# filesystem may be safely unlinked at any time by hand.
__zshenv_memoise() {
  local -r funcname="${1:?}"
  local -r cachedir="${zshenvd}/_evalcache"
  local -r cache="${cachedir}/${funcname}"

  mkdir -p -m 0700 "${cachedir}"

  if [[ -r "${cache}" ]]; then
    cat "${cache}"
    return
  fi

  eval "${funcname}" | tee "${cache}"
}

__zshenv_platform()   { uname -s | tr A-Z a-z   ; }
__zshenv_hostname_f() { hostname -f 2>/dev/null ; }
__zshenv_hostname_s() { hostname -s 2>/dev/null ; }

__zshenv_unfunction() {
  unfunction __zshenv_source
  unfunction __zshenv_source_base
  unfunction __zshenv_prepend_path
  unfunction __zshenv_memoise
  unfunction __zshenv_platform
  unfunction __zshenv_hostname_f
  unfunction __zshenv_hostname_s
}

# vim:ft=zsh
